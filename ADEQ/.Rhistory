group_by(WBID, MonitoringLocationIdentifier) %>%
mutate(sscmedian = rep(1:55, each = 4, length.out = length(WBID))) #1:55 because assumed there aren't more than 55 aggregated samples for one waterbody
# Allows check to make sure there are at least 4 samples in each group to take a median of
f4.stdssc <- f4.stdssc %>%
group_by(WBID, MonitoringLocationIdentifier, sscmedian) %>%
mutate(ssccount = 1:n())
# Determiens if a minimum of 4 samples taken
f4.stdssc <- f4.stdssc %>%
group_by(WBID, MonitoringLocationIdentifier, sscmedian) %>%
mutate(ssclast = last(ssccount))
# Exclude data without a minimum of 4 samples
f4.stdssc <- filter(f4.stdssc, ssclast == 4)
# Take median of last 4 samples
f4.stdssc <- f4.stdssc %>%
group_by(WBID, MonitoringLocationIdentifier, CharacteristicName, ResultSampleFractionText, NewUse, STDTYPE, sscmedian) %>%
summarise(aggtimespace = median(aggtimespace), aggdate = min(aggdate))
# Insert STDS
f4.stdssc <- mutate(f4.stdssc, STD = ifelse(NewUse == "AWCAcute", 25, 80))
# Determine if standard met
f4.stdssc <- mutate(f4.stdssc, Exceed = ifelse(aggtimespace > STD, "Yes", "No"))
# Get SSC Ready for rbind
f4.stdssc <- f4.stdssc %>%
ungroup() %>%
mutate(ResultSampleFractionText = "Suspended")
# Blank out unneeded fields
f4.stdssc <- mutate(f4.stdssc, STDUSE = "none")
f4.stdssc <- mutate(f4.stdssc, SUBSTANCE_CAS_NO = "none")
f4.stdssc$STDNEW <- f4.stdssc$STD
# Select the same fields to prep for rbind
f4.stdssc <- select(f4.stdssc,
WBID,
MonitoringLocationIdentifier,
aggdate,
CharacteristicName,
ResultSampleFractionText,
NewUse,
aggtimespace,
STDTYPE,
STDUSE,
SUBSTANCE_CAS_NO,
STD,
STDNEW,
Exceed)
# Ammonia
f5.ammonia <- filter(f.stdtypejoin, CharacteristicName == "AMMONIA-NITROGEN" | CharacteristicName == "PH" | CharacteristicName == "TEMPERATURE, WATER")
# Add in min and max values for ph and temp
f5.ammonia <- within(f5.ammonia, aggtimespace[CharacteristicName == 'PH' & aggtimespace >= 9] <- 9)
f5.ammonia <- within(f5.ammonia, aggtimespace[CharacteristicName == 'PH' & aggtimespace <= 6.5] <- 6.5)
f5.ammonia <- within(f5.ammonia, aggtimespace[CharacteristicName == 'TEMPERATURE, WATER' & aggtimespace >= 30] <- 30)
f5.ammonia <- within(f5.ammonia, aggtimespace[CharacteristicName == 'TEMPERATURE, WATER' & aggtimespace <= 0] <- 0)
# Just need aquatic life
f5.ammonia <- filter(f5.ammonia, grepl("AW", NewUse, fixed = TRUE))
# Get rid of total dissolved
f5.ammonia <- f5.ammonia %>%
ungroup() %>%
select(-ResultSampleFractionText, -STDTYPE)
# Make sure no duplicate data
f5.ammonia <- distinct(f5.ammonia, WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, NewUse, aggtimespace)
f5.ammonia <- filter(f5.ammonia, !is.na(aggtimespace))
# Since no aggregation need to take max (worst case) so spread works
f5.ammonia <- f5.ammonia %>%
group_by(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, NewUse) %>%
summarize(aggtimespace = max(aggtimespace))
# Spread so calculations can happen
f5.ammoniaspread <- f5.ammonia %>%
group_by(WBID, MonitoringLocationIdentifier, aggdate, NewUse) %>%
spread(CharacteristicName, aggtimespace)
f5.ammoniaspread <- rename(f5.ammoniaspread, TEMP = `TEMPERATURE, WATER`) #Rename mg/L to join
# Ammonia Chronic
# Add standards for each dependent parameter
f5.ammoniachronic <- drop_na(f5.ammoniaspread, `AMMONIA-NITROGEN`, PH, TEMP)
f5.ammoniachronic <- filter(f5.ammoniachronic, grepl("Chronic", NewUse, fixed = TRUE))
# New AW warm/cold chronic ammonia standard.  Uses uniodids present assumed.
f5.ammoniachronic <- mutate(f5.ammoniachronic, p1 = ((0.0278/(1+10^(7.688-PH)))+(1.1994/(1+(10^(PH-7.688))))))
f5.ammoniachronic <- mutate(f5.ammoniachronic, p2 = (20-max(TEMP,7)))
f5.ammoniachronic <- mutate(f5.ammoniachronic, p3 = 2.126*(10^(0.028*(p2))))
f5.ammoniachronic <- mutate(f5.ammoniachronic, nh3awcchronic = 0.8876*p1*p3)
f5.ammoniachronic <- mutate(f5.ammoniachronic, nh3awwchronic = 0.8876*p1*p3)
# New AW EDW Chronic ammonia standard.  Uses the uniodids not present formula.
f5.ammoniachronic <- mutate(f5.ammoniachronic, e1 = ((0.0278/(1+10^(7.688-PH)))+(1.1994/(1+(10^(PH-7.688))))))
f5.ammoniachronic <- mutate(f5.ammoniachronic, e2 = (20-max(TEMP,7)))
f5.ammoniachronic <- mutate(f5.ammoniachronic, e3 = 7.547*(10^(0.028*(e2))))
f5.ammoniachronic <- mutate(f5.ammoniachronic, nh3awedwchronic = 0.8876*e1*e3)
# Determine if chronic standards met
f5.ammoniachronic <- f5.ammoniachronic %>%
mutate(Exceednh3awcchronic = ifelse(`AMMONIA-NITROGEN` > nh3awcchronic, "Yes", "No")) %>%
mutate(Exceednh3awwchronic = ifelse(`AMMONIA-NITROGEN` > nh3awwchronic, "Yes", "No")) %>%
mutate(Exceednh3awedwchronic = ifelse(`AMMONIA-NITROGEN` > nh3awedwchronic, "Yes", "No"))
# ammonia awcchronic
f5.ammoniachronicawc <- f5.ammoniachronic %>%
filter(NewUse == "AWCChronic") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, TEMP, nh3awcchronic, Exceednh3awcchronic) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWC_CHRONIC_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH, ":", "Temperature = ", TEMP)) %>%
mutate(STD = nh3awcchronic) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceednh3awcchronic) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# ammonia awwchronic
f5.ammoniachronicaww <- f5.ammoniachronic %>%
filter(NewUse == "AWWChronic") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, TEMP, nh3awwchronic, Exceednh3awwchronic) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWW_CHRONIC_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH, ":", "Temperature = ", TEMP)) %>%
mutate(STD = nh3awwchronic) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceednh3awwchronic) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# ammonia awedwchronic
f5.ammoniachronicawedw <- f5.ammoniachronic %>%
filter(NewUse == "AWEDWChronic") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, TEMP, nh3awedwchronic, Exceednh3awedwchronic) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWEDW_CHRONIC_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH, ":", "Temperature = ", TEMP)) %>%
mutate(STD = nh3awedwchronic) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceednh3awedwchronic) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# Ammonia Acute
f5.ammoniaacute <- select(f5.ammoniaspread, -TEMP)
f5.ammoniaacute <- drop_na(f5.ammoniaspread, `AMMONIA-NITROGEN`, PH)
# New AW cold ammonia acute standard.  Uniodids present.  Now has temp
f5.ammoniaacute <- mutate(f5.ammoniaacute, p1 = ((0.275/(1+10^(7.204-PH)))+(39.0/(1+(10^(PH-7.204))))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, p2 = 20-TEMP)
f5.ammoniaacute <- mutate(f5.ammoniaacute, p3 = 23.12*(10^(0.036*(p2))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, p4 = (0.7249*((0.0114/(1+10^(7.204-PH)))+(1.6181/(1+(10^(PH-7.204)))))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, p5 = p4*p3)
f5.ammoniaacute <- mutate(f5.ammoniaacute, nh3awcacute = ifelse(p1 <= p5, p1, p5))
# New AW warm ammonia acute standard.  Uniodids present.  Now has temp
f5.ammoniaacute <- mutate(f5.ammoniaacute, w1 = (0.7249*((0.0114/(1+10^(7.204-PH)))+(1.6181/(1+(10^(PH-7.204)))))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, w2 = 20-TEMP)
f5.ammoniaacute <- mutate(f5.ammoniaacute, wt = 23.12*(10^(0.036*(w2))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, w3 = ifelse(51.93 <= wt, 51.93, wt))
f5.ammoniaacute <- mutate(f5.ammoniaacute, nh3awwacute = w1*w3)
# New AW edw ammonia acute.  Uniodids absent.  Now has temp
f5.ammoniaacute <- mutate(f5.ammoniaacute, e1 = (0.7249*((0.0114/(1+10^(7.204-PH)))+(1.6181/(1+(10^(PH-7.204)))))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, e2 = 20-TEMP)
f5.ammoniaacute <- mutate(f5.ammoniaacute, et = 62.15*(10^(0.036*(e2))))
f5.ammoniaacute <- mutate(f5.ammoniaacute, e3 = ifelse(51.93 <= et, 51.93, et))
f5.ammoniaacute <- mutate(f5.ammoniaacute, nh3awedwacute = e1*e3)
# Determine if standards met
f5.ammoniaacute <- f5.ammoniaacute %>%
mutate(Exceedawcacute = ifelse(`AMMONIA-NITROGEN` > nh3awcacute, "Yes", "No")) %>%
mutate(Exceedawwacute = ifelse(`AMMONIA-NITROGEN` > nh3awwacute, "Yes", "No")) %>%
mutate(Exceedawedwacute = ifelse(`AMMONIA-NITROGEN` > nh3awedwacute, "Yes", "No"))
# ammonia awcacute
f5.ammoniaacuteawc <- f5.ammoniaacute %>%
filter(NewUse == "AWCAcute") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, nh3awcacute, Exceedawcacute) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWC_ACUTE_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH)) %>%
mutate(STD = nh3awcacute) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceedawcacute) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# ammonia awwacute
f5.ammoniaacuteaww <- f5.ammoniaacute %>%
filter(NewUse == "AWWAcute") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, nh3awwacute, Exceedawwacute) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWW_ACUTE_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH)) %>%
mutate(STD = nh3awwacute) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceedawwacute) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# ammonia awedwacute
f5.ammoniaacuteawedw <- f5.ammoniaacute %>%
filter(NewUse == "AWEDWAcute") %>%
select(WBID, aggdate, NewUse, `AMMONIA-NITROGEN`, PH, nh3awedwacute, Exceedawedwacute) %>%
mutate(aggtimespace = `AMMONIA-NITROGEN`) %>%
mutate(STDTYPE = "AMMONIA") %>%
mutate(CharacteristicName = "AMMONIA-NITROGEN") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDUSE = "AWEDW_ACUTE_MAX") %>%
mutate(SUBSTANCE_CAS_NO = paste("pH = ", PH)) %>%
mutate(STD = nh3awedwacute) %>%
mutate(STDNEW = STD) %>%
mutate(Exceed = Exceedawedwacute) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
drop_na(Exceed)
# 6 Site Specific Nutrients
f6.nutrient <- filter(f.stdtypejoin, CharacteristicName == "INORGANIC NITROGEN (NITRATE AND NITRITE)" | CharacteristicName == "KJELDAHL NITROGEN" | CharacteristicName == "NITROGEN" | CharacteristicName == "PHOSPHORUS")
# Nutrient site specific standards apply to recreational uses and aquatic life uses. Filter out all the extra uses.  AW and Rec have same values so at the end duplicate and change use.
f6.nutrient <- f6.nutrient %>%
filter(grepl("AW", NewUse)) %>%
filter(grepl("Chronic", NewUse)) # just chronic for full 5 years and to get rid of duplicates.  Not a chronic standard just using for proxy.
# Filter for total
f6.nutrient <- f6.nutrient %>%
filter(ResultSampleFractionText == "Total")
# Determine if Nitrogen is either already calculated (preferred) or needs to be calculated by adding Kjeldahl nitrogen and nitrate/ite
# Get rid of total dissolved and characteristicname.  Ungrouping important here.
f6.nutrient <- f6.nutrient %>%
ungroup() %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, aggtimespace, -ResultSampleFractionText, NewUse, -STDTYPE)
# Distinct and aggregate for spread to work
f6.nutrient <- f6.nutrient %>%
distinct(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, aggtimespace, NewUse) %>%
group_by(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, NewUse) %>%
summarise(aggtimespace = max(aggtimespace))
# Pair/spread all nutrient data
f6.nutrientspread <- spread(f6.nutrient, CharacteristicName, aggtimespace)
# Add the TKN and Nitrate/ite
f6.nutrientspread <- mutate(f6.nutrientspread, TN = `INORGANIC NITROGEN (NITRATE AND NITRITE)` + `KJELDAHL NITROGEN`)
# Combine nitrogen based on priority
f6.nutrientspread$newTN <- ifelse(!is.na(f6.nutrientspread$NITROGEN), f6.nutrientspread$NITROGEN,
ifelse(!is.na(f6.nutrientspread$TN), f6.nutrientspread$TN, NA))
# Open nutrient standards
ZNUTRIENTSTDS <- read_csv("inputs/ZNUTRIENTSTDS.csv")
# Find out which site specific standard applied to which WBID
f6.nutrientspread <- left_join(f6.nutrientspread, ZDEQUSES, by = "WBID")
# Just need TN and TP and site specific
f6.nutrientspread <- f6.nutrientspread %>%
select(WBID, MonitoringLocationIdentifier, NewUse, aggdate, PHOSPHORUS, newTN, NUTRIENT) %>%
rename(NITROGEN = newTN) %>%
left_join(ZUSECROSSWALK2, by = "NewUse")
# Total Nitrogen
# Filter and select for just nitrogen data to get ready for standards comparision
f6.tn <- f6.nutrientspread %>%
select(-PHOSPHORUS) %>%
filter(!is.na(NUTRIENT)) %>%
filter(!is.na(NITROGEN)) %>%
rename(aggtimespace = NITROGEN) %>%
mutate(CharacteristicName = "NITROGEN")
# Join data with standards
f6.tn <- left_join(f6.tn, ZNUTRIENTSTDS, by = c("NUTRIENT", "CharacteristicName"))
# Single Sample Maximum
f6.tnssm <- f6.tn %>%
select(-annualmean, -`90thpercentile`) %>%
mutate(Exceed = ifelse(aggtimespace > ssm, "Yes", "No")) %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDTYPE = "Nutrient") %>%
mutate(SUBSTANCE_CAS_NO = "None") %>%
mutate(STD = 99999.9) %>%
rename(STDNEW = ssm) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
filter(!is.na(Exceed))
# Annual Mean
# Step 1 get monthly means
f6.tnannualmean <- f6.tn %>%
mutate(month = format(aggdate, "%m"), year = format(aggdate, "%Y")) %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, month, year) %>%
summarise(monthmean = mean(aggtimespace))
# Need at least 2 monthly means
f6.tnannualmean <- f6.tnannualmean %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, month, year) %>%
summarise(countmonthmean = n(), monthmean = mean(monthmean)) %>%
filter(countmonthmean > 1)
# Step 2 calculate annual mean then exclude any year with less or equal to 3
f6.tnannualmean <- f6.tnannualmean %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, year) %>%
summarise(annmean = mean(monthmean), count = n()) %>%
filter(count >= 3)
# Format fields
f6.tnannualmean <- f6.tnannualmean %>%
mutate(CharacteristicName = "NITROGEN") %>%
left_join(ZNUTRIENTSTDS, by = c("NUTRIENT", "CharacteristicName")) %>%
mutate(CharacteristicName = "TNANNUALMEAN") %>%
mutate(Exceed = ifelse(annmean > annualmean, "Yes", "No")) %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(aggdate = as.Date("1900-01-01")) %>%
mutate(NewUse = "Site Specific Nutrient") %>%
mutate(STDTYPE = "Nutrient") %>%
mutate(SUBSTANCE_CAS_NO = "none") %>%
mutate(STD = 99999.9) %>%
rename(STDNEW = ssm) %>%
rename(aggtimespace = annmean) %>%
mutate(STDUSE = "none") %>%
ungroup() %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
filter(!is.na(Exceed))
# Total Phosphorus
# Filter and select for just nitrogen data to get ready for standards comparision
f6.tp <- f6.nutrientspread %>%
select(-NITROGEN) %>%
filter(!is.na(NUTRIENT)) %>%
filter(!is.na(PHOSPHORUS)) %>%
rename(aggtimespace = PHOSPHORUS) %>%
mutate(CharacteristicName = "PHOSPHORUS")
# Join data with standards
f6.tp <- left_join(f6.tp, ZNUTRIENTSTDS, by = c("NUTRIENT", "CharacteristicName"))
# Single Sample Maximum
f6.tpssm <- f6.tp %>%
select(-annualmean, -`90thpercentile`) %>%
mutate(Exceed = ifelse(aggtimespace > ssm, "Yes", "No")) %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(STDTYPE = "Nutrient") %>%
mutate(SUBSTANCE_CAS_NO = "none") %>%
mutate(STD = 99999.9) %>%
rename(STDNEW = ssm) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
filter(!is.na(Exceed))
# Annual Mean
# Step 1 get monthly means
f6.tpannualmean <- f6.tp %>%
mutate(month = format(aggdate, "%m"), year = format(aggdate, "%Y")) %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, month, year) %>%
summarise(monthmean = mean(aggtimespace))
# Need at least 2 monthly means
f6.tpannualmean <- f6.tpannualmean %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, month, year) %>%
summarise(countmonthmean = n(), monthmean = mean(monthmean)) %>%
filter(countmonthmean > 1)
# Step 2 calculate annual mean then exclude any year with less or equal to 3
f6.tpannualmean <- f6.tpannualmean %>%
group_by(WBID, MonitoringLocationIdentifier, NUTRIENT, year) %>%
summarise(annmean = mean(monthmean), count = n()) %>%
filter(count >= 3)
# Format fields
f6.tpannualmean <- f6.tpannualmean %>%
mutate(CharacteristicName = "PHOSPHORUS") %>%
left_join(ZNUTRIENTSTDS, by = c("NUTRIENT", "CharacteristicName")) %>%
mutate(CharacteristicName = "TPANNUALMEAN") %>%
mutate(Exceed = ifelse(annmean > annualmean, "Yes", "No")) %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(aggdate = as.Date("1900-01-01")) %>%
mutate(NewUse = "Site Specific Nutrient") %>%
mutate(STDTYPE = "Nutrient") %>%
mutate(SUBSTANCE_CAS_NO = "none") %>%
mutate(STD = 99999.9) %>%
rename(STDNEW = ssm) %>%
rename(aggtimespace = annmean) %>%
mutate(STDUSE = "none") %>%
ungroup() %>%
select(WBID, MonitoringLocationIdentifier, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
filter(!is.na(Exceed))
# 7 PH
# pH is the only parameter that functions using a range so can have both a min exceedance and max exceedance.
# Open PH STDS.  Has hydrogen ion concentrations for comparison.
ZPHSTDS <- read_csv("inputs/ZPHSTDS.csv",
col_types = cols(phmax = col_double()))
# PH Min Exceedances
# Filter for hydrogen ion
# Compare to standards.  Note: Hion is opposite from pH.  So an hion of 0.0001 (ph 4) is below the standard of 0.00001 (pH 5) for DWS
f7.phmin <- f.stdtypejoin %>%
filter(CharacteristicName == "HIONMIN") %>%
left_join(ZPHSTDS, by = "NewUse") %>% # Join stds to data
mutate(Exceedmin = ifelse(HIONMINSTD < aggtimespace, "Yes", "No")) %>%
rename(Exceed = Exceedmin) %>%
filter(!is.na(Exceed)) %>%
mutate(SUBSTANCE_CAS_NO = paste0("Standard between ", phmin, " and ", phmax, "su"))
f7.phmax <- f.stdtypejoin %>%
filter(CharacteristicName == "HIONMAX") %>%
left_join(ZPHSTDS, by = "NewUse") %>% # Join stds to data
mutate(Exceedmin = ifelse(HIONMAXSTD > aggtimespace, "Yes", "No")) %>%
rename(Exceed = Exceedmin) %>%
filter(!is.na(Exceed)) %>%
mutate(SUBSTANCE_CAS_NO = paste0("Standard between ", phmin, " and ", phmax, "su"))
# Combine ph min and max taking the worst case scenario
f7.phall <- bind_rows(f7.phmin, f7.phmax)
# Remove duplicates (the no exceedances are repeated for min and max)
f7.phall <- f7.phall %>%
ungroup() %>%
select(WBID, MonitoringLocationIdentifier, aggdate, NewUse, aggtimespace, Exceed, SUBSTANCE_CAS_NO) %>%
distinct()
# Standard format
f7.phall <- f7.phall %>%
ungroup() %>%
mutate(CharacteristicName = "PH") %>%
mutate(ResultSampleFractionText = "Total") %>%
mutate(agg2 = -log10(aggtimespace)) %>% #use log 10 for ph...log give natural log
select(-aggtimespace) %>%
rename(aggtimespace = agg2) %>%
mutate(STDTYPE = "none") %>%
mutate(STDUSE = "none") %>%
mutate(STD = 999999.9) %>%
mutate(STDNEW = 999999.9) %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed)
# Prioritize exceedances / remove duplicates.
f7.phall <- f7.phall %>%
arrange(WBID, NewUse, aggdate, desc(Exceed)) %>%
mutate(concate = paste(WBID, NewUse, aggdate, sep = "-")) %>% # the sort in previous step prioritizes exceedances
mutate(duplicate = duplicated(concate)) %>%
filter(duplicate == "FALSE") %>%
select(-duplicate, -concate)
# 8 E coli
# E coli regular
# E coli regular samples just look at last 3 years of data
f8.ecolireg <- f.stdtypejoin %>%
filter(CharacteristicName == "ESCHERICHIA COLI") %>%
filter(NewUse == "FBC" | NewUse == "PBC")
# Bring in the e coli standards
ZECOLISTDS <- read_csv("inputs/ZECOLISTDS.csv")
# Join data to standards
f8.ecolireg <- left_join(f8.ecolireg, ZECOLISTDS, by = "NewUse")
# Compare to standards
f8.ecolireg <- mutate(f8.ecolireg, Exceedreg = ifelse(aggtimespace > EcoliSTD, "Yes", "No"))
# Prepare for bind_row
f8.ecolireg <- f8.ecolireg %>%
mutate(SUBSTANCE_CAS_NO = "none") %>%
rename(STDNEW = EcoliSTD) %>%
mutate(STD = 99999.9) %>%
mutate(STDUSE = "none") %>%
rename(Exceed = "Exceedreg") %>%
ungroup() %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDTYPE, STDUSE, SUBSTANCE_CAS_NO, STD, STDNEW, Exceed) %>%
filter(!is.na(Exceed))
# JOIN ALL EXCEEDANCE RESULTS
f.joinstdall1 <- bind_rows(f1.stdregular, f2.joinstdoxygen, f3.awcacutegather, f3.awcchronicgather, f3.awwacutegather, f3.awwchronicgather, f3.awedwacutegather, f3.awedwchronicgather, f3.aweacutegather)
f.joinstdall2 <- bind_rows(f4.stdssc, f5.ammoniachronicawc, f5.ammoniachronicaww, f5.ammoniachronicawedw, f5.ammoniaacuteawc, f5.ammoniaacuteaww, f5.ammoniaacuteawedw)
f.joinstdall3 <- bind_rows(f6.tnssm, f6.tnannualmean, f6.tpssm, f6.tpannualmean, f7.phall, f8.ecolireg)
f.joinstdall <- bind_rows(f.joinstdall1, f.joinstdall2, f.joinstdall3)
f.joinstdall <- left_join(f.joinstdall, ZUSECROSSWALK, by = "NewUse")
# Remove the dummy data.  Clean.
f.exceed <- f.joinstdall %>%
filter(WBID != "REMOVE") %>%
select(WBID, MonitoringLocationIdentifier, aggdate, CharacteristicName, ResultSampleFractionText, NewUse, aggtimespace, STDNEW, SUBSTANCE_CAS_NO, Exceed) %>%
left_join(c.sites, by = c("WBID", "MonitoringLocationIdentifier"))
# Identify Detections.  If detection and nondetection on same date call it a detection
f.dl <- d.usejoin %>%
distinct(WBID, MonitoringLocationIdentifier, NewUse, CharacteristicName, ResultSampleFractionText, ActivityStartDate, ndorresult) %>%
mutate(numdetect = ifelse(ndorresult == "detect", 1, 0)) %>%
group_by(WBID, MonitoringLocationIdentifier, NewUse, CharacteristicName, ResultSampleFractionText, ActivityStartDate) %>%
summarise(numdetect = max(numdetect)) %>%
mutate(detect = ifelse(numdetect == 1, "Yes", "No")) %>%
select(-numdetect)
# Join to f.exceed.  Make non detects = -1
# issue where just pH results deleted
f.exceed <- f.exceed %>%
left_join(f.dl, c("WBID", "MonitoringLocationIdentifier", "NewUse", "CharacteristicName", "ResultSampleFractionText", "aggdate" = "ActivityStartDate"))
f.exceed$detect[is.na(f.exceed$detect)] <- "Yes"
f.exceed <- f.exceed %>%
mutate(aggtimespace = ifelse(detect == "Yes", aggtimespace, -1)) %>%
rename(Comment = SUBSTANCE_CAS_NO)
# Exceedance summary table
f.exceedcount <- f.exceed %>%
count(NewUse, CharacteristicName, ResultSampleFractionText, Exceed) %>%
spread(Exceed, n) %>%
arrange(desc(Yes))
# Format for shiny
f.exceed$CharacteristicName <- as.factor(f.exceed$CharacteristicName)
f.exceed$ResultSampleFractionText <- as.factor(f.exceed$ResultSampleFractionText)
f.exceed$NewUse <- as.factor(f.exceed$NewUse)
# a.explore$ndorresult <- as.factor(a.explore$ndorresult)
# a.explore$ndorresult <- ordered(a.explore$ndorresult, levels = c("detect", "nondetect"))
f.sites <- a.explore %>%
distinct(MonitoringLocationIdentifier) %>%
left_join(YSITESALL, by = "MonitoringLocationIdentifier") %>%
left_join(c.sites, by = "MonitoringLocationIdentifier") %>%
select(SiteID, LATITUDE_DECDEG, LONGITUDE_DECDEG) %>%
rename(Latitude = LATITUDE_DECDEG, Longitude = LONGITUDE_DECDEG)
colorize <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
f.improve <- f.exceed %>%
distinct(WBID) %>%
left_join(ZIMPROVEMENTS, by = "WBID")
View(f.improve)
f.improvemax <- f.improve %>%
group_by(improvementdate) %>%
top_n(1)
View(f.improvemax)
f.improvemax <- f.improve %>%
group_by(improvementdate) %>%
top_n(1) %>%
distinct(improvementdate, .keep_all = TRUE)
View(f.improvemax)
f.improvemax <- f.improve %>%
group_by(improvementdate) %>%
top_n(1) %>%
distinct(improvementdate, .keep_all = TRUE) %>%
select(WBID, improvementdate)
f.exceed <- f.exceed %>%
left_join(f.improvemax, by = "WBID")
View(f.exceed)
f.improvemax <- f.improve %>%
group_by(improvementdate) %>%
top_n(1) %>%
distinct(improvementdate, .keep_all = TRUE) %>%
select(improvementdate)
View(f.improvemax)
renderPlotly({p <- show_data() %>%
ggplot(aes(x = aggdate, y = aggtimespace, color = Exceed, text = paste(SiteID, " ", Comment, "Standard: ", STDNEW))) +
geom_jitter(alpha = 0.6) +
geom_vline(xintercept = f.improvemax$improvementdate) +
labs(x = "Date", y = "Result in Standard Units (most = mg/L)", title = "Raw Water Quality Data - Non Detects Shown as -1.0 mg/L") +
# scale_x_date(date_breaks = "5 years") +
scale_color_manual(values = c("black", "red")) +
# scale_fill_manual(values = c("black", "red")) +
theme_light() +
theme(legend.position = "bottom")
ggplotly(p)
})
